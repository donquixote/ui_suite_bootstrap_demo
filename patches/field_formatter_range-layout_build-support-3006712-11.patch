From 89a49e2af3f11150ea301823aa4c2cc90ac8d5af Mon Sep 17 00:00:00 2001
From: pdureau <pdureau@1903334.no-reply.drupal.org>
Date: Wed, 29 Jan 2020 14:56:12 +0100
Subject: [PATCH] Issue #3006712: The module isn't layout builder compatible

---
 field_formatter_range.module | 171 +++++++++++++++++++++++------------
 1 file changed, 112 insertions(+), 59 deletions(-)

diff --git a/field_formatter_range.module b/field_formatter_range.module
index 0b44d2a..4532086 100644
--- a/field_formatter_range.module
+++ b/field_formatter_range.module
@@ -1,20 +1,34 @@
 <?php
 
+/**
+ * @file
+ * This module provides additional multivalued entity field options.
+ */
+
+use Drupal\Core\Entity\Display\EntityViewDisplayInterface;
+use Drupal\Core\Entity\EntityInterface;
+use Drupal\field\Entity\FieldConfig;
+use Drupal\Core\Field\BaseFieldDefinition;
+use Drupal\Core\Form\FormStateInterface;
+use Drupal\Core\Field\FieldDefinitionInterface;
+use Drupal\Core\Field\FormatterInterface;
 use Drupal\Core\Field\FieldStorageDefinitionInterface;
 use Drupal\Core\Render\Element;
 
 /**
  * Implements hook_field_formatter_third_party_settings_form().
  */
-function field_formatter_range_field_formatter_third_party_settings_form(\Drupal\Core\Field\FormatterInterface $plugin, \Drupal\Core\Field\FieldDefinitionInterface $field_definition, $view_mode, $form, \Drupal\Core\Form\FormStateInterface $form_state) {
-  $element = array();
+function field_formatter_range_field_formatter_third_party_settings_form(FormatterInterface $plugin, FieldDefinitionInterface $field_definition, $view_mode, $form, FormStateInterface $form_state) {
+  $element = [];
   $cardinality = 1;
+
   // Figure out the type of the field.
-  if ($field_definition instanceof \Drupal\Core\Field\BaseFieldDefinition) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition **/
+  if ($field_definition instanceof BaseFieldDefinition) {
+    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition */
     $cardinality = $field_definition->getCardinality();
-  } elseif ($field_definition instanceof \Drupal\field\Entity\FieldConfig) {
-    /** @var Drupal\field\Entity\FieldConfig $field_definition **/
+  }
+  elseif ($field_definition instanceof FieldConfig) {
+    /** @var Drupal\field\Entity\FieldConfig $field_definition */
     $cardinality = $field_definition->getFieldStorageDefinition()->getCardinality();
   }
 
@@ -27,27 +41,27 @@ function field_formatter_range_field_formatter_third_party_settings_form(\Drupal
     '#type' => 'checkbox',
     '#title' => t('Reverse order'),
     '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'reverse', 0),
-    '#description' => t('Displays the items in reversed order. This can be used to display only the latest image when used with the limit setting.')
+    '#description' => t('Displays the items in reversed order. This can be used to display only the latest image when used with the limit setting.'),
   ];
 
-  $element['limit'] = array(
+  $element['limit'] = [
     '#type' => 'number',
     '#title' => t('Display items'),
     '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'limit', 0),
     '#required' => TRUE,
     '#min' => 0,
     '#max' => $cardinality == FieldStorageDefinitionInterface::CARDINALITY_UNLIMITED ? 100 : $cardinality,
-    '#description' => t('Number of items to display. Set to 0 to display all items.')
-  );
+    '#description' => t('Number of items to display. Set to 0 to display all items.'),
+  ];
 
-  $element['offset'] = array(
+  $element['offset'] = [
     '#type' => 'number',
     '#title' => t('Skip items'),
     '#default_value' => $plugin->getThirdPartySetting('field_formatter_range', 'offset', 0),
     '#required' => TRUE,
     '#min' => 0,
-    '#description' => t('Number of items to skip from the beginning.')
-  );
+    '#description' => t('Number of items to skip from the beginning.'),
+  ];
 
   return $element;
 }
@@ -56,14 +70,17 @@ function field_formatter_range_field_formatter_third_party_settings_form(\Drupal
  * Implements hook_field_formatter_settings_summary_alter().
  */
 function field_formatter_range_field_formatter_settings_summary_alter(&$summary, $context) {
+
   // Display the range information.
   $cardinality = 1;
+
   // Figure out the type of the field.
-  if ($context['field_definition'] instanceof \Drupal\Core\Field\BaseFieldDefinition) {
-    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition **/
+  if ($context['field_definition'] instanceof BaseFieldDefinition) {
+    /** @var \Drupal\Core\Field\BaseFieldDefinition $field_definition */
     $cardinality = $context['field_definition']->getCardinality();
-  } elseif ($context['field_definition'] instanceof \Drupal\field\Entity\FieldConfig) {
-    /** @var Drupal\field\Entity\FieldConfig $field_definition **/
+  }
+  elseif ($context['field_definition'] instanceof FieldConfig) {
+    /** @var Drupal\field\Entity\FieldConfig $field_definition */
     $cardinality = $context['field_definition']->getFieldStorageDefinition()->getCardinality();
   }
 
@@ -82,7 +99,8 @@ function field_formatter_range_field_formatter_settings_summary_alter(&$summary,
     $message = (empty($limit) || $limit == $cardinality)
       ? t('Display all items.')
       : \Drupal::translation()->formatPlural($limit, 'Display 1 item.', 'Display @n items.', ['@n' => $limit]);
-  } else {
+  }
+  else {
     $message = (empty($limit) || $limit == $cardinality)
       ? t('Display all items in reversed order.')
       : \Drupal::translation()->formatPlural($limit, 'Display 1 item in reversed order.', 'Display @n items in reversed order.', ['@n' => $limit]);
@@ -99,53 +117,88 @@ function field_formatter_range_field_formatter_settings_summary_alter(&$summary,
 /**
  * Implements hook_entity_view_alter().
  */
-function field_formatter_range_entity_view_alter(array &$build, Drupal\Core\Entity\EntityInterface $entity, \Drupal\Core\Entity\Display\EntityViewDisplayInterface $display) {
-  foreach ($display->getComponents() AS $field => $field_information) {
-    // Make sure the field if displayed.
-    if (isset($build[$field])) {
-      $settings = $field_information['third_party_settings'];
-      if (isset($settings['field_formatter_range'])) {
-        // Get the settings.
-        $reverse = !empty($settings['field_formatter_range']['reverse']) ? (int) $settings['field_formatter_range']['reverse'] : 0;
-        $offset = !empty($settings['field_formatter_range']['offset']) ? (int) $settings['field_formatter_range']['offset'] : 0;
-        $limit = !empty($settings['field_formatter_range']['limit']) ? (int) $settings['field_formatter_range']['limit'] : 0;
-
-        // Get the children.
-        $children = Element::children($build[$field]);
-
-        // Reverse them if needed.
-        if (!empty($reverse)) {
-          $children = array_reverse($children);
-        }
+function field_formatter_range_entity_view_alter(array &$build, EntityInterface $entity, EntityViewDisplayInterface $display) {
+
+  if ($display->isLayoutBuilderEnabled()) {
+
+    $sections = $display->getSections();
+
+    foreach ($sections as $section_id => $section) {
+      $components = $section->getComponents();
 
-        // Set limit to NULL so we can work only with offset if needed.
-        $limit = empty($limit) ? NULL : $limit;
+      foreach ($components as $uuid => $component) {
+        $region = $component->get('region');
+        $config = $component->get('configuration');
 
-        // Process items accordingly if offset or limit is set.
-        if (!empty($offset) || !empty($limit)) {
-          $children = array_slice($children, $offset, $limit);
+        if (isset($config['formatter']['third_party_settings']['field_formatter_range'])) {
+          $formatter_settings = $config['formatter']['third_party_settings']['field_formatter_range'];
+          field_formatter_range_apply_settings($formatter_settings, $build['_layout_builder'][$section_id][$region][$uuid]['content']);
         }
+      }
+    }
+  }
+  else {
+    foreach ($display->getComponents() as $field => $field_information) {
+
+      // Make sure the field if displayed.
+      if (isset($build[$field])) {
+        $settings = $field_information['third_party_settings'];
 
-        // If any of the settings is enabled we'll process the items
-        // since deltas have to start from 0 and we already have
-        // the proper items in proper order.
-        if (!empty($reverse) || !empty($offset) || !empty($limit)) {
-          // Get the items we'll display.
-          $items = [];
-          foreach ($children AS $child) {
-            $items[] = $build[$field][$child];
-          }
-
-          // Remove all the existing items so we can display only
-          // the ones we want.
-          foreach (Element::children($build[$field]) AS $child) {
-            unset($build[$field][$child]);
-          }
-
-          // Put the items that we want to display back into the display.
-          $build[$field] += $items;
+        if (isset($settings['field_formatter_range'])) {
+          // Get the settings.
+          field_formatter_range_apply_settings($settings['field_formatter_range'], $build[$field]);
         }
       }
     }
   }
 }
+
+/**
+ * Apply the field_formatter_range settings to content array.
+ */
+function field_formatter_range_apply_settings($settings, &$field_content) {
+  $reverse = !empty($settings['reverse']) ? (int) $settings['reverse'] : 0;
+  $offset = !empty($settings['offset']) ? (int) $settings['offset'] : 0;
+  $limit = !empty($settings['limit']) ? (int) $settings['limit'] : 0;
+
+  // Set limit to NULL so we can work only with offset if needed.
+  if ($limit == 0) {
+    $limit = NULL;
+  }
+
+  $field_content = (is_null($field_content)) ? [] : $field_content;
+
+  $children = $children_cp = Element::children($field_content);
+
+  // Reverse them if needed.
+  if (!empty($reverse)) {
+    $children = array_reverse($children);
+  }
+
+  // Process items accordingly if offset or limit is set.
+  if (!empty($offset) || !empty($limit)) {
+    $children = array_slice($children, $offset, $limit);
+  }
+
+  // If any of the settings is enabled we'll process the items
+  // since deltas have to start from 0 and we already have
+  // the proper items in proper order.
+  if (!empty($reverse) || !empty($offset) || !empty($limit)) {
+
+    // Get the items we'll display.
+    $items = [];
+
+    foreach ($children as $child) {
+      $items[] = $field_content[$child];
+    }
+
+    // Remove all the existing items so we can display only
+    // the ones we want.
+    foreach ($children_cp as $child) {
+      unset($field_content[$child]);
+    }
+
+    // Put the items that we want to display back into the display.
+    $field_content += $items;
+  }
+}
-- 
2.17.1

